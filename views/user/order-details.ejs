<%- include('../user/partials/header', {name: name}) %>

<section class="order-details-section py-5">
    <div class="container">
        <!-- Professional Breadcrumbs -->
        <nav aria-label="breadcrumb" class="custom-breadcrumb mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-door me-1"></i> Home</a></li>
                <li class="breadcrumb-item"><a href="/user/profile">Profile</a></li>
                <li class="breadcrumb-item"><a href="/user/orders">Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">Order Details</li>
            </ol>
        </nav>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="mb-0">Order Details</h2>
            <div>
                <% if (order.orderStatus === 'Delivered' || order.paymentStatus === 'Paid') { %>
                    <button class="btn btn-outline-primary me-2" id="downloadInvoiceBtn" data-order-id="<%= order._id %>">Download Invoice</button>
                <% } %>
                <a href="/user/orders" class="btn btn-outline-secondary">Back to Orders</a>
            </div>
        </div>

        <div class="card border-0 shadow-sm">
            <div class="card-body p-4">
                <!-- Order Summary -->
                <div class="row g-4 mb-4">
                    <div class="col-md-6">
                        <h5 class="fw-semibold mb-3">Order Information</h5>
                        <dl class="row mb-0">
                            <dt class="col-4 fw-medium">Order ID:</dt>
                            <dd class="col-8"><%= order._id %></dd>
                            <dt class="col-4 fw-medium">Date:</dt>
                            <dd class="col-8"><%= new Date(order.placedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></dd>
                            <dt class="col-4 fw-medium">Total:</dt>
                            <dd class="col-8">
                                $<%= order.totalPrice.toFixed(2) %>
                                <% if (order.items.some(item => item.cancelled)) { %>
                                    <small class="text-muted">(Originally $<%= order.items.reduce((sum, item) => sum + (item.quantity * item.price), 0).toFixed(2) %>)</small>
                                <% } %>
                            </dd>
                            <dt class="col-4 fw-medium">Payment:</dt>
                            <dd class="col-8">
                                <%= order.paymentMethod %>
                                <% if (order.paymentStatus === 'Pending' && order.paymentMethod === 'RAZORPAY') { %>
                                    <span class="badge bg-warning-subtle text-warning">Payment Pending</span>
                                <% } else if (order.paymentStatus === 'Paid') { %>
                                    <span class="badge bg-success-subtle text-success">Paid</span>
                                <% } else if (order.paymentStatus === 'Cancelled') { %>
                                    <span class="badge bg-danger-subtle text-danger">Cancelled</span>
                                <% } %>
                            </dd>
                            <dt class="col-4 fw-medium">Status:</dt>
                            <dd class="col-8">
                                <span class="badge status-badge <%= order.orderStatus.toLowerCase() %>">
                                    <% if (order.items.some(item => item.cancelled) && order.items.some(item => !item.cancelled)) { %>
                                        Partially Canceled / <%= order.orderStatus %>
                                    <% } else if (order.items.every(item => item.cancelled)) { %>
                                        Canceled
                                    <% } else if (order.items.some(item => item.returnRequested) && order.items.some(item => !item.returnRequested && !item.cancelled)) { %>
                                        Partially Return Requested / <%= order.orderStatus %>
                                    <% } else { %>
                                        <%= order.orderStatus %>
                                    <% } %>
                                </span>
                            </dd>
                        </dl>

                        <!-- Retry Payment Button -->
                        <% if (order.paymentStatus === 'Pending' && order.paymentMethod === 'RAZORPAY') { %>
                            <div class="mt-3">
                                <button id="retryPaymentBtn" class="btn btn-sm btn-outline-warning" data-order-id="<%= order._id %>" data-amount="<%= order.totalPrice %>">
                                    Retry Payment
                                </button>
                            </div>
                        <% } %>
                    </div>
                    <div class="col-md-6">
                        <h5 class="fw-semibold mb-3">Shipping Address</h5>
                        <address class="text-muted">
                            <strong><%= order.address.fullName %></strong><br>
                            <%= order.address.street %><br>
                            <%= order.address.city %>, <%= order.address.state %>, <%= order.address.zipCode %><br>
                            <%= order.address.country %><br>
                            <span class="fw-medium">Phone:</span> <%= order.address.phone %>
                        </address>
                    </div>
                </div>

                <hr class="my-4">

                <!-- Items Table -->
                <h5 class="fw-semibold mb-3">Ordered Items</h5>
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th scope="col">Image</th>
                                <th scope="col">Product</th>
                                <th scope="col">Variant</th>
                                <th scope="col">Qty</th>
                                <th scope="col">Price</th>
                                <th scope="col">Subtotal</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% order.items.forEach((item, index) => { %>
                                <tr class="<%= item.cancelled || item.returned ? 'text-muted' : '' %>">
                                    <td>
                                        <% if (item.variantImage) { %>
                                            <img src="<%= item.variantImage %>" alt="<%= item.productName %>" class="rounded" style="width: 60px; height: 60px; object-fit: cover; <%= item.cancelled || item.returned ? 'opacity: 0.6;' : '' %>">
                                        <% } else { %>
                                            <div class="bg-light rounded d-flex align-items-center justify-content-center" style="width: 60px; height: 60px;">
                                                <span class="text-muted small">No Image</span>
                                            </div>
                                        <% } %>
                                    </td>
                                    <td>
                                        <%= item.cancelled || item.returned ? `<del>${item.productName}</del>` : item.productName %>
                                    </td>
                                    <td><%= item.variantSize %>, <%= item.variantColor %></td>
                                    <td><%= item.quantity %></td>
                                    <td>$<%= item.price.toFixed(2) %></td>
                                    <td>$<%= (item.quantity * item.price).toFixed(2) %></td>
                                    <td>
                                        <% if ((order.orderStatus === 'Pending' || order.orderStatus === 'Processing') && !item.cancelled) { %>
                                            <button class="btn btn-sm btn-outline-danger cancel-item-btn" data-order-id="<%= order._id %>" data-item-index="<%= index %>">
                                                Cancel
                                            </button>
                                        <% } else if (order.orderStatus === 'Delivered' && !item.cancelled && !item.returnRequested && !item.returned) { %>
                                            <button class="btn btn-sm btn-outline-warning return-item-btn" data-order-id="<%= order._id %>" data-item-index="<%= index %>">
                                                Return
                                            </button>
                                        <% } else if (item.cancelled) { %>
                                            <span class="text-muted small">Cancelled <%= item.cancelledAt ? new Date(item.cancelledAt).toLocaleDateString() : '' %></span>
                                        <% } else if (item.returnRequested) { %>
                                            <span class="text-warning small">Return Requested <%= item.returnRequestedAt ? new Date(item.returnRequestedAt).toLocaleDateString() : '' %></span>
                                        <% } else if (item.returned) { %>
                                            <span class="text-muted small">Returned <%= item.returnedAt ? new Date(item.returnedAt).toLocaleDateString() : '' %></span>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>

                <!-- Order History (if applicable) -->
                <% if (order.items.some(item => item.cancelled || item.returnRequested || item.returned)) { %>
                    <hr class="my-4">
                    <h5 class="fw-semibold mb-3">Order History</h5>
                    <ul class="list-group list-group-flush">
                        <% order.items.forEach(item => { %>
                            <% if (item.cancelled) { %>
                                <li class="list-group-item py-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong><%= item.productName %></strong> (Qty: <%= item.quantity %>)<br>
                                            <span class="text-muted">Cancelled <%= item.cancelledAt ? `on ${new Date(item.cancelledAt).toLocaleDateString()}` : '' %></span>
                                            <% if (item.cancellationReason) { %>
                                                <small class="d-block text-muted">Reason: <%= item.cancellationReason %></small>
                                            <% } %>
                                        </div>
                                        <span class="badge bg-danger-subtle text-danger">Cancelled</span>
                                    </div>
                                </li>
                            <% } else if (item.returnRequested) { %>
                                <li class="list-group-item py-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong><%= item.productName %></strong> (Qty: <%= item.quantity %>)<br>
                                            <span class="text-warning">Return Requested <%= item.returnRequestedAt ? `on ${new Date(item.returnRequestedAt).toLocaleDateString()}` : '' %></span>
                                            <% if (item.returnReason) { %>
                                                <small class="d-block text-muted">Reason: <%= item.returnReason %></small>
                                            <% } %>
                                        </div>
                                        <span class="badge bg-warning-subtle text-warning">Return Requested</span>
                                    </div>
                                </li>
                            <% } else if (item.returned) { %>
                                <li class="list-group-item py-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong><%= item.productName %></strong> (Qty: <%= item.quantity %>)<br>
                                            <span class="text-muted">Returned <%= item.returnedAt ? `on ${new Date(item.returnedAt).toLocaleDateString()}` : '' %></span>
                                            <% if (item.returnReason) { %>
                                                <small class="d-block text-muted">Reason: <%= item.returnReason %></small>
                                            <% } %>
                                        </div>
                                        <span class="badge bg-secondary-subtle text-secondary">Returned</span>
                                    </div>
                                </li>
                            <% } %>
                        <% }) %>
                    </ul>
                <% } %>
            </div>
        </div>
    </div>
</section>

<!-- Return Reason Modal -->
<div class="modal fade" id="returnReasonModal" tabindex="-1" aria-labelledby="returnReasonModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnReasonModalLabel">Request Return</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="returnReasonForm">
                    <div class="mb-3">
                        <label for="returnReason" class="form-label">Reason for Return</label>
                        <textarea class="form-control" id="returnReason" rows="3" required placeholder="Please explain why you want to return this item"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitReturnReason">Submit Return</button>
            </div>
        </div>
    </div>
</div>

<style>
    .order-details-section {
        background-color: #ffffff;
        min-height: 100vh;
        margin-top: 70px;
    }

    .container {
        max-width: 1200px;
    }

    .custom-breadcrumb .breadcrumb {
        background-color: #fff;
        padding: 0.75rem 1rem;
        border-radius: 0.375rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .custom-breadcrumb .breadcrumb-item a {
        color: #007bff;
        text-decoration: none;
    }

    .custom-breadcrumb .breadcrumb-item a:hover {
        color: #0056b3;
    }

    .custom-breadcrumb .breadcrumb-item.active {
        color: #6c757d;
    }

    .custom-breadcrumb .breadcrumb-item + .breadcrumb-item::before {
        content: "\203A";
        color: #adb5bd;
        font-size: 1.2rem;
    }

    .card {
        border-radius: 0.75rem;
        overflow: hidden;
    }

    .status-badge {
        padding: 0.5em 1em;
        font-weight: 500;
        border-radius: 1rem;
        text-transform: capitalize;
    }

    .status-badge.pending { background-color: #fff3cd; color: #856404; }
    .status-badge.processing { background-color: #cce5ff; color: #004085; }
    .status-badge.shipped { background-color: #d1ecf1; color: #0c5460; }
    .status-badge.delivered { background-color: #d4edda; color: #155724; }
    .status-badge.cancelled { background-color: #f8d7da; color: #721c24; }
    .status-badge.returned { background-color: #e2e3e5; color: #383d41; }
    .status-badge.return-requested { background-color: #fff3cd; color: #856404; }

    .table th {
        border-bottom: 2px solid #dee2e6;
        padding: 1rem;
    }

    .table td {
        padding: 1rem;
    }

    .btn-outline-danger, .btn-outline-warning {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
    }

    .list-group-item {
        border: none;
        border-bottom: 1px solid #e9ecef;
    }

    .list-group-item:last-child {
        border-bottom: none;
    }

    .badge.bg-danger-subtle { background-color: #f8d7da; color: #721c24; }
    .badge.bg-warning-subtle { background-color: #fff3cd; color: #856404; }
    .badge.bg-secondary-subtle { background-color: #e2e3e5; color: #383d41; }
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cancelItemButtons = document.querySelectorAll(".cancel-item-btn");
        const returnItemButtons = document.querySelectorAll(".return-item-btn");
        const retryPaymentBtn = document.getElementById("retryPaymentBtn");
        const downloadInvoiceBtn = document.getElementById("downloadInvoiceBtn");
        let currentOrderId = null;
        let currentItemIndex = null;

        // Cancel Item Logic with SweetAlert
        cancelItemButtons.forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");
                const itemIndex = this.getAttribute("data-item-index");
                const productName = this.closest('tr').querySelector('td:nth-child(2)').textContent;

                const result = await Swal.fire({
                    title: 'Confirm Cancellation',
                    text: `Are you sure you want to cancel ${productName}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, Cancel It'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/user/cancel-order-item/${orderId}/${itemIndex}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ reason: "User requested cancellation" })
                        });
                        const data = await response.json();
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Cancelled',
                                text: 'Item cancelled successfully!',
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to cancel item.',
                            });
                        }
                    } catch (error) {
                        console.error("Error cancelling item:", error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while cancelling the item.',
                        });
                    }
                }
            });
        });

        // Return Item Logic with Modal and SweetAlert
        returnItemButtons.forEach(button => {
            button.addEventListener("click", function () {
                currentOrderId = this.getAttribute("data-order-id");
                currentItemIndex = this.getAttribute("data-item-index");
                const modal = new bootstrap.Modal(document.getElementById('returnReasonModal'));
                modal.show();
            });
        });

        // Submit Return Reason
        document.getElementById("submitReturnReason").addEventListener("click", async function () {
            const reason = document.getElementById("returnReason").value.trim();
            const productName = document.querySelector(`.return-item-btn[data-item-index="${currentItemIndex}"]`).closest('tr').querySelector('td:nth-child(2)').textContent;

            if (!reason) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Reason Required',
                    text: 'Please provide a reason for returning the item.',
                });
                return;
            }

            const result = await Swal.fire({
                title: 'Confirm Return Request',
                text: `Are you sure you want to request a return for ${productName}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, Request Return'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/user/request-return-item/${currentOrderId}/${currentItemIndex}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ reason })
                    });
                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Return Requested',
                            text: 'Your return request has been submitted successfully!',
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to request return.',
                        });
                    }
                } catch (error) {
                    console.error("Error requesting return:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while requesting the return.',
                    });
                }
                bootstrap.Modal.getInstance(document.getElementById('returnReasonModal')).hide();
                document.getElementById("returnReason").value = "";
            }
        });

        // Retry Payment Logic
        if (retryPaymentBtn) {
            retryPaymentBtn.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");
                const amount = this.getAttribute("data-amount");

                try {
                    const response = await fetch('/user/retry-razorpay-payment', {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId })
                    });
                    const result = await response.json();

                    if (!result.success) {
                        Swal.fire("Error", result.message || "Failed to initiate payment retry.", "error");
                        return;
                    }

                    const options = {
                        key: result.key_id,
                        amount: result.order.amount,
                        currency: "INR",
                        name: "ManniFest ECOM",
                        description: "Retry Payment for Order #" + orderId,
                        order_id: result.order.id,
                        handler: async function (response) {
                            const verifyResponse = await fetch("/user/verify-razorpay-payment", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: result.orderId
                                }),
                            });

                            const verifyResult = await verifyResponse.json();
                            if (verifyResult.success) {
                                Swal.fire("Success", "Payment successful! Order updated!", "success").then(() => {
                                    window.location.href = `/user/order-success?orderId=${verifyResult.orderId}`;
                                });
                            } else {
                                Swal.fire("Error", verifyResult.message || "Payment verification failed!", "error").then(() => {
                                    window.location.href = verifyResult.redirect;
                                });
                            }
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire("Cancelled", "Payment retry was cancelled.", "info");
                            }
                        },
                        prefill: {
                            name: "<%= order.address.fullName %>",
                            email: "customer@example.com",
                            contact: "<%= order.address.phone %>"
                        },
                        theme: {
                            color: "#3399cc"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        Swal.fire("Error", response.error.description || "Payment failed!", "error");
                    });
                    rzp.open();

                } catch (error) {
                    console.error("Error initiating retry payment:", error);
                    Swal.fire("Error", "Failed to initiate payment retry.", "error");
                }
            });
        }

        // Download Invoice Logic
        if (downloadInvoiceBtn) {
            downloadInvoiceBtn.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");
                try {
                    const response = await fetch(`/user/download-invoice/${orderId}`, {
                        method: "GET"
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `invoice_${orderId}.pdf`;
                        document.body.appendChild(a);
                        a.click();
                        a.remove();
                        window.URL.revokeObjectURL(url);
                        Swal.fire({
                            icon: 'success',
                            title: 'Invoice Downloaded',
                            text: 'Your invoice has been downloaded successfully!',
                        });
                    } else {
                        const data = await response.json();
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to download invoice.',
                        });
                    }
                } catch (error) {
                    console.error("Error downloading invoice:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while downloading the invoice.',
                    });
                }
            });
        }
    });
</script>

<%- include('../user/partials/footer') %>