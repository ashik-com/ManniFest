
<%- include('../admin/partials/header') %>

<div class="container-fluid">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title fw-semibold mb-4">Coupon Management</h5>
            <div class="card mb-0">
                <div class="card-body">
                    <form id="couponForm" novalidate>
                        <fieldset>
                            <legend class="text-center">Add New Coupon</legend>
                            <div class="mb-3">
                                <label for="code" class="form-label">Coupon Code</label>
                                <input type="text" class="form-control" id="code" name="code" required>
                            </div>
                            <div class="mb-3">
                                <label for="discountType" class="form-label">Discount Type</label>
                                <select class="form-select" id="discountType" name="discountType" required>
                                    <option value="percentage">Percentage</option>
                                    <option value="fixed">Fixed Amount</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="discountValue" class="form-label">Discount Value</label>
                                <input type="number" class="form-control" id="discountValue" name="discountValue" required>
                                <div id="valueHelp" class="form-text">For percentage, enter value between 1-100</div>
                            </div>
                            <div class="mb-3">
                                <label for="minimumPurchase" class="form-label">Minimum Purchase (₹)</label>
                                <input type="number" class="form-control" id="minimumPurchase" name="minimumPurchase" value="0">
                            </div>
                            <div class="mb-3">
                                <label for="maximumDiscount" class="form-label">Maximum Purchase Amount (₹)</label>
                                <input type="number" class="form-control" id="maximumDiscount" name="maximumDiscount" value="0">
                                <div class="form-text">Set to 0 for no maximum limit</div>
                            </div>
                            <div class="mb-3">
                                <label for="expiryDate" class="form-label">Expiry Date</label>
                                <input type="date" class="form-control" id="expiryDate" name="expiryDate" required>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="isActive" name="isActive" checked>
                                <label class="form-check-label" for="isActive">Active</label>
                            </div>
                            <button type="submit" class="btn btn-primary" id="submitBtn">Create Coupon</button>
                            <a href="/admin/coupons" class="btn btn-secondary">Cancel</a>
                        </fieldset>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <a href="/admin/coupons">Back</a>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const couponForm = document.getElementById('couponForm');
    const codeInput = document.getElementById('code');
    const discountTypeSelect = document.getElementById('discountType');
    const discountValueInput = document.getElementById('discountValue');
    const minimumPurchaseInput = document.getElementById('minimumPurchase');
    const maximumDiscountInput = document.getElementById('maximumDiscount');
    const expiryDateInput = document.getElementById('expiryDate');
    const valueHelp = document.getElementById('valueHelp');
    const submitBtn = document.getElementById('submitBtn');

    // Check if SweetAlert2 is loaded
    if (typeof Swal === 'undefined') {
        console.error('SweetAlert2 is not loaded. Falling back to native alerts.');
        window.alert('Error: SweetAlert2 library failed to load. Please check your internet connection or CDN.');
    }

    // Auto-generate coupon code button
    const generateCodeBtn = document.createElement('button');
    generateCodeBtn.type = 'button';
    generateCodeBtn.className = 'btn btn-outline-secondary mt-2';
    generateCodeBtn.textContent = 'Generate Random Code';
    codeInput.parentNode.appendChild(generateCodeBtn);
    
    generateCodeBtn.addEventListener('click', function() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < 8; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        codeInput.value = result;
    });
    
    // Auto-format coupon code to uppercase
    codeInput.addEventListener('input', function() {
        this.value = this.value.toUpperCase();
    });
    
    // Update helper text based on discount type
    discountTypeSelect.addEventListener('change', function() {
        if (this.value === 'percentage') {
            valueHelp.textContent = 'For percentage, enter value between 1-100';
            discountValueInput.max = 100;
            maximumDiscountInput.parentNode.style.display = 'block';
        } else {
            valueHelp.textContent = 'Enter fixed discount amount in ₹';
            discountValueInput.max = '';
            maximumDiscountInput.parentNode.style.display = 'none';
        }
    });
    
    // Set minimum date to today
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    const todayFormatted = `${yyyy}-${mm}-${dd}`;
    expiryDateInput.min = todayFormatted;
    
    // Form submission with AJAX
    couponForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        console.log('Form submit event triggered'); // Debug statement
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Creating...';

        const code = codeInput.value.trim();
        const discountType = discountTypeSelect.value;
        const discountValue = parseFloat(discountValueInput.value) || 0;
        const minimumPurchase = parseFloat(minimumPurchaseInput.value) || 0;
        const maximumDiscount = parseFloat(maximumDiscountInput.value) || 0;
        const expiryDateValue = expiryDateInput.value;
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        const expiryDate = new Date(expiryDateValue);
        expiryDate.setHours(0, 0, 0, 0);

        // Validation function with SweetAlert2 or fallback
        const showError = (title, text) => {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: text,
                });
            } else {
                alert(`${title}: ${text}`);
            }
            submitBtn.disabled = false;
            submitBtn.textContent = 'Create Coupon';
        };

        // Coupon code validation
        const codeRegex = /^[A-Z0-9]+$/;
        if (!code || !codeRegex.test(code)) {
            showError('Invalid Coupon Code', 'Coupon code must contain only letters and numbers (no spaces or special characters)');
            return;
        }

        // Discount type validation
        if (!['percentage', 'fixed'].includes(discountType)) {
            showError('Invalid Discount Type', 'Discount type must be either "percentage" or "fixed"');
            return;
        }

        // Discount value validation
        if (isNaN(discountValue) || discountValue <= 0) {
            showError('Invalid Discount Value', 'Discount value must be greater than zero');
            return;
        }

        if (discountType === 'percentage' && (discountValue < 1 || discountValue > 100)) {
            showError('Invalid Percentage', 'Percentage discount must be between 1 and 100');
            return;
        }

        if (discountType === 'fixed' && discountValue > minimumPurchase) {
            showError('Misconfiguration', 'Fixed discount amount cannot be greater than minimum purchase value');
            return;
        }

        // Minimum purchase validation
        if (minimumPurchase < 0) {
            showError('Invalid Minimum Purchase', 'Minimum purchase cannot be negative');
            return;
        }

        // Maximum discount validation
        if (maximumDiscount < 0) {
            showError('Invalid Maximum Discount', 'Maximum discount amount cannot be negative');
            return;
        }

        if (discountType === 'fixed' && maximumDiscount > 0 && maximumDiscount < discountValue) {
            showError('Invalid Maximum Discount', 'Maximum discount amount cannot be less than the fixed discount value');
            return;
        }

        // Expiry date validation
        if (!expiryDateValue) {
            showError('Invalid Expiry Date', 'Please select an expiry date');
            return;
        }

        if (isNaN(expiryDate.getTime())) {
            showError('Invalid Expiry Date', 'Please enter a valid date');
            return;
        }

        if (expiryDate < currentDate) {
            showError('Invalid Expiry Date', 'Expiry date must be today or in the future');
            return;
        }

        // Prepare form data
        const formData = new FormData();
        formData.append('code', code);
        formData.append('discountType', discountType);
        formData.append('discountValue', discountValue.toString());
        formData.append('minimumPurchase', minimumPurchase.toString());
        formData.append('maximumDiscount', maximumDiscount.toString());
        formData.append('expiryDate', expiryDateInput.value);
        formData.append('isActive', document.getElementById('isActive').checked.toString());

        try {
            const response = await fetch('/admin/addcoupon', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (!response.ok || !result.success) {
                const errorMessages = result.errors ? Object.values(result.errors).join('\n') : 'Failed to create coupon';
                throw new Error(errorMessages);
            }

            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: result.message || 'Coupon created successfully!',
                    showConfirmButton: true,
                }).then(() => {
                    window.location.href = '/admin/coupons';
                });
            } else {
                alert('Coupon created successfully!');
                window.location.href = '/admin/coupons';
            }
        } catch (error) {
            console.error('Error:', error);
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error creating coupon:\n' + error.message,
                });
            } else {
                alert('Error creating coupon: ' + error.message);
            }
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Create Coupon';
        }
    });
    
    // Preview coupon display
    const previewDiv = document.createElement('div');
    previewDiv.className = 'mt-4 p-3 border rounded bg-light';
    previewDiv.innerHTML = '<h5>Coupon Preview</h5><div id="couponPreview" class="p-3 border rounded bg-white"></div>';
    couponForm.parentNode.appendChild(previewDiv);
    
    const couponPreview = document.getElementById('couponPreview');
    
    function updatePreview() {
        const code = codeInput.value || 'SAMPLE';
        const discountType = discountTypeSelect.value;
        const discountValue = discountValueInput.value || '0';
        const minPurchase = minimumPurchaseInput.value || '0';
        const maxDiscount = maximumDiscountInput.value || '0';
        const expiryDate = expiryDateInput.value ? new Date(expiryDateInput.value).toLocaleDateString() : 'Not set';
        
        let discountText = discountType === 'percentage' ? `${discountValue}% OFF` : ` ₹${discountValue} OFF`;
        if (discountType === 'percentage' && maxDiscount > 0) {
            discountText += ` (Max ₹${maxDiscount})`;
        }
        
        couponPreview.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4 class="text-primary">${code}</h4>
                    <h3 class="fw-bold">${discountText}</h3>
                    <p class="mb-0 text-muted">Min. Purchase: ₹${minPurchase}</p>
                </div>
                <div class="text-end">
                    <p class="mb-0">Valid till</p>
                    <p class="fw-bold">${expiryDate}</p>
                </div>
            </div>
        `;
    }
    
    [codeInput, discountTypeSelect, discountValueInput, minimumPurchaseInput, maximumDiscountInput, expiryDateInput].forEach(input => {
        input.addEventListener('input', updatePreview);
        input.addEventListener('change', updatePreview);
    });
    
    discountTypeSelect.dispatchEvent(new Event('change'));
    updatePreview();
});
</script>

<%- include('../admin/partials/footer') %>
