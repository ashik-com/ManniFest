<%- include('../admin/partials/header') %>
<div class="container-fluid">
    <h2 class="mb-4">Order Details</h2>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Customer Email:</strong> <%= order.userEmail || 'N/A' %></p>
                    <p><strong>Order ID:</strong> <%= order._id %></p>
                    <p><strong>Date:</strong> <%= new Date(order.placedAt).toLocaleDateString() %></p>
                    <p><strong>Total Amount:</strong> ₹<%= order.totalPrice.toFixed(2) %></p>
                    <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                    <p><strong>Payment Status:</strong> 
                        <span class="badge <%= order.paymentStatus === 'Pending' ? 'bg-warning' : order.paymentStatus === 'Paid' ? 'bg-success' : order.paymentStatus === 'Failed' ? 'bg-danger' : 'bg-info' %>">
                            <%= order.paymentStatus %>
                        </span>
                    </p>
                    <p><strong>Order Status:</strong>
                        <% if (order.orderStatus === 'Cancelled' || order.orderStatus === 'Delivered') { %>
                            <span class="badge <%= order.orderStatus === 'Cancelled' ? 'bg-danger' : 'bg-success' %>">
                                <%= order.orderStatus %>
                            </span>
                        <% } else { %>
                            <select class="form-select order-status d-inline-block w-auto" data-order-id="<%= order._id %>">
                                <option value="Pending" <%= order.orderStatus === 'Pending' ? 'selected' : '' %>>Pending</option>
                                <option value="Processing" <%= order.orderStatus === 'Processing' ? 'selected' : '' %>>Processing</option>
                                <option value="Shipped" <%= order.orderStatus === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="Delivered" <%= order.orderStatus === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="Cancelled" <%= order.orderStatus === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                <option value="Returned" <%= order.orderStatus === 'Returned' ? 'selected' : '' %>>Returned</option>
                                <option value="Return Requested" <%= order.orderStatus === 'Return Requested' ? 'selected' : '' %>>Return Requested</option>
                            </select>
                        <% } %>
                    </p>
                    <% if (order.items.some(item => item.returnRequested && !item.returned)) { %>
                        <div class="mt-2">
                            <button class="btn btn-success btn-sm approve-return" data-order-id="<%= order._id %>">Approve Return</button>
                            <button class="btn btn-danger btn-sm reject-return" data-order-id="<%= order._id %>">Decline Return</button>
                        </div>
                    <% } %>
                </div>
                <div class="col-md-6">
                    <p><strong>Shipping Address:</strong></p>
                    <address>
                        <%= order.address.fullName %><br>
                        <%= order.address.street %>,<br>
                        <%= order.address.city %>, <%= order.address.state %>,<br>
                        <%= order.address.zipCode %>, <%= order.address.country %><br>
                        Phone: <%= order.address.phone %>
                    </address>
                </div>
            </div>

            <hr>

            <h5 class="mt-3">Items</h5>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Variant</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% order.items.forEach((item, index) => { %>
                            <tr class="<%= item.cancelled || item.returned ? 'table-secondary text-muted' : '' %>">
                                <td><%= item.productName %></td>
                                <td><%= item.variantColor %> / <%= item.variantSize %></td>
                                <td>₹<%= item.price.toFixed(2) %></td>
                                <td><%= item.quantity %></td>
                                <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                                <td>
                                    <% if (item.cancelled) { %>
                                        <span class="text-muted">Cancelled <%= item.cancelledAt ? `on ${new Date(item.cancelledAt).toLocaleDateString()}` : '' %></span>
                                    <% } else if (item.returned) { %>
                                        <span class="text-muted">Returned <%= item.returnedAt ? `on ${new Date(item.returnedAt).toLocaleDateString()}` : '' %></span>
                                    <% } else if (item.returnRequested) { %>
                                        <span class="text-warning">Return Requested <%= item.returnRequestedAt ? `on ${new Date(item.returnRequestedAt).toLocaleDateString()}` : '' %></span>
                                    <% } else { %>
                                        <span class="text-success">Active</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>

            <div class="mt-4">
                <a href="/admin/orders" class="btn btn-secondary">Back to Orders</a>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Order Status Change Handler with Confirmation
        const statusSelect = document.querySelector(".order-status");
        if (statusSelect) {
            statusSelect.addEventListener("change", async function () {
                const orderId = this.getAttribute("data-order-id");
                const newStatus = this.value;
                const previousValue = this.dataset.previousValue || "Pending";
                const statusContainer = this.parentElement;

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: `Do you want to change the order status to ${newStatus}?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, change it!'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/update-order-status/${orderId}`, {
                            method: "PATCH",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ status: newStatus })
                        });
                        const result = await response.json();
                        if (response.ok) {
                            Swal.fire("Success!", result.message, "success");

                            if (newStatus === "Cancelled" || newStatus === "Delivered") {
                                const badgeClass = newStatus === "Cancelled" ? "bg-danger" : "bg-success";
                                statusContainer.innerHTML = `
                                    <strong>Order Status:</strong>
                                    <span class="badge ${badgeClass}">${newStatus}</span>
                                `;
                            }
                            this.dataset.previousValue = newStatus;
                        } else {
                            Swal.fire("Error!", result.message || "Something went wrong", "error");
                            this.value = previousValue;
                        }
                    } catch (error) {
                        Swal.fire("Error!", "Network error occurred!", "error");
                        this.value = previousValue;
                    }
                } else {
                    this.value = previousValue;
                }
            });

            statusSelect.dataset.previousValue = statusSelect.value;
        }

        // Approve return with confirmation
        document.querySelectorAll(".approve-return").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to approve the return request?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, approve it!'
                });

                if (result.isConfirmed) {
                    try {
                        // Assuming this endpoint approves all return requests for the order
                        const response = await fetch(`/admin/approve-return/${orderId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire("Success!", "Return approved and stock updated!", "success");
                            location.reload();
                        } else {
                            Swal.fire("Error!", result.message, "error");
                        }
                    } catch (error) {
                        Swal.fire("Error!", "Network error occurred!", "error");
                    }
                }
            });
        });

        // Reject return with confirmation
        document.querySelectorAll(".reject-return").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to decline the return request?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, decline it!'
                });

                if (result.isConfirmed) {
                    try {
                        // Assuming this endpoint rejects all return requests for the order
                        const response = await fetch(`/admin/reject-return/${orderId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire("Success!", "Return request declined!", "success");
                            location.reload();
                        } else {
                            Swal.fire("Error!", result.message, "error");
                        }
                    } catch (error) {
                        Swal.fire("Error!", "Network error occurred!", "error");
                    }
                }
            });
        });
    });
</script>
<%- include('../admin/partials/footer') %>