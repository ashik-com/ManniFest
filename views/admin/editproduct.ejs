<%- include('../admin/partials/header') %>
<div class="container-fluid">
  <div class="card">
    <div class="card-body">
      <h5 class="card-title fw-semibold mb-4">Product Management</h5>
      <div class="card mb-0">
        <div class="card-body">
          <form id="editProductForm" enctype="multipart/form-data">
            <fieldset>
              <legend class="text-center">Edit Product</legend>
              <div class="mb-3">
                <label for="name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<%= product.name %>" required>
              </div>
              <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="3" required><%= product.description %></textarea>
              </div>
              <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category" required>
                  <% categories.forEach(category => { %>
                    <option value="<%= category._id %>" <%= category._id.toString() === product.category.toString() ? 'selected' : '' %>>
                      <%= category.name %>
                    </option>
                  <% }) %>
                </select>
              </div>
              <div id="cropperModal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.5); z-index: 1000;">
                <img id="cropperImage" style="max-width: 500px;">
                <div class="mt-2">
                  <button id="cropImage" class="btn btn-primary">Crop & Save</button>
                  <button id="cancelCrop" class="btn btn-secondary">Cancel</button>
                  <button id="skipCrop" class="btn btn-secondary">Skip Cropping</button>
                </div>
              </div>
              <div class="mb-3">
                <label for="isListed" class="form-label">Is Listed?</label>
                <input type="checkbox" id="isListed" name="isListed" value="true" <%= product.isListed ? 'checked' : '' %>>
              </div>
              <div class="mb-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="status" required>
                  <option value="active" <%= product.status === 'active' ? 'selected' : '' %>>Active</option>
                  <option value="inactive" <%= product.status === 'inactive' ? 'selected' : '' %>>Inactive</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="price" class="form-label">Base Price</label>
                <input type="number" class="form-control" id="price" name="price" value="<%= product.baseprice %>"required>
              </div>
              
              <!-- Variants Section -->
              <div class="mb-3">
                <label for="variants" class="form-label">Variants</label>
                <div id="variantContainer">
                  <% variants.forEach((variant, index) => { %>
                    <div class="variant-group border p-3 mt-2" data-index="<%= index %>" data-variant-id="<%= variant._id %>">
                      <input type="hidden" name="variants[<%= index %>][id]" value="<%= variant._id %>">
                      <label>Color:</label>
                      <input type="text" class="form-control" name="variants[<%= index %>][color]" value="<%= variant.color %>" required>
                      <label>Size:</label>
                      <select class="form-select" name="variants[<%= index %>][size]" required>
                        <option value="S" <%= variant.size === "S" ? "selected" : "" %>>S</option>
                        <option value="M" <%= variant.size === "M" ? "selected" : "" %>>M</option>
                        <option value="L" <%= variant.size === "L" ? "selected" : "" %>>L</option>
                        <option value="XL" <%= variant.size === "XL" ? "selected" : "" %>>XL</option>
                      </select>
                      <label>Price:</label>
                      <input type="number" class="form-control" name="variants[<%= index %>][price]" value="<%= variant.price %>"  required>
                      <label>Stock:</label>
                      <input type="number" class="form-control" name="variants[<%= index %>][stock]" value="<%= variant.stock %>"  required>
                      <label>Variant Images (at least 3 required):</label>
                      <input type="file" class="form-control variantImages" data-index="<%= index %>" multiple accept="image/jpeg,image/png">
                      <div id="variantImagesPreview_<%= index %>" class="d-flex flex-wrap">
                        <% variant.images.forEach(image => { %>
                          <div class="image-preview">
                            <img src="<%= image %>" style="max-width: 100px;" class="m-2">
                            <button type="button" class="btn btn-danger btn-sm remove-image" data-index="<%= index %>" data-image="<%= image %>">‚ùå</button>
                          </div>
                        <% }) %>
                      </div>
                      <button type="button" class="btn btn-danger btn-sm remove-variant mt-2" data-index="<%= index %>" data-variant-id="<%= variant._id %>">Remove Variant</button>
                    </div>
                  <% }) %>
                </div>
                <button type="button" id="addVariant" class="btn btn-primary btn-sm mt-2">Add Variant</button>
              </div>
              <div class="mb-3">
                <label for="specifications" class="form-label">Specifications</label>
                <input type="text" class="form-control" name="specifications[material]" placeholder="Material" value="<%= product.specifications?.material || '' %>">
                <select class="form-select" name="specifications[sleeveType]" required>
                  <option value="Full sleeve" <%= product.specifications?.sleeveType === 'Full sleeve' ? 'selected' : '' %>>Full sleeve</option>
                  <option value="Half sleeve" <%= product.specifications?.sleeveType === 'Half sleeve' ? 'selected' : '' %>>Half sleeve</option>
                  <option value="Sleeveless" <%= product.specifications?.sleeveType === 'Sleeveless' ? 'selected' : '' %>>Sleeveless</option>
                </select>
                <input type="text" class="form-control" name="specifications[fitType]" placeholder="Fit Type" value="<%= product.specifications?.fitType || '' %>">
                <input type="text" class="form-control" name="specifications[pattern]" placeholder="Pattern" value="<%= product.specifications?.pattern || '' %>">
              </div>
              <button type="submit" class="btn btn-success" id="addProductButton" data-id="<%= product._id %>">Save Edits</button>
            </fieldset>
          </form>
        </div>
      </div>
    </div>
    <a href="/admin/products">Back</a>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
  const variantContainer = document.getElementById("variantContainer");
  const addVariantButton = document.getElementById("addVariant");
  const cropperModal = document.getElementById("cropperModal");
  const cropperImage = document.getElementById("cropperImage");
  const cropImageBtn = document.getElementById("cropImage");
  const cancelCropBtn = document.getElementById("cancelCrop");
  const skipCropBtn = document.getElementById("skipCrop");
  const addProductForm = document.getElementById("editProductForm");
  const editBtn = document.getElementById("addProductButton");
  const productId = editBtn.getAttribute("data-id");

  let cropper;
  let croppingTarget = null;
  let croppedVariantImages = {};
  let removedImages = {};
  let removedVariants = [];
  let currentFile = null;

  // Add Variant
  addVariantButton.addEventListener("click", addVariantGroup);

  // Handle Variant Image Uploads
  variantContainer.addEventListener("change", (event) => {
    if (event.target.classList.contains("variantImages")) {
      const variantIndex = event.target.dataset.index;
      handleFileInput(event, variantIndex);
    }
  });

  // Remove Image
  variantContainer.addEventListener("click", (event) => {
    if (event.target.classList.contains("remove-image")) {
      const variantIndex = event.target.dataset.index;
      const imageName = event.target.dataset.image;
      const imageId = event.target.dataset.imageId; // For new images
      Swal.fire({
        title: "Are you sure?",
        text: "This will remove the image!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, remove it!",
      }).then((result) => {
        if (result.isConfirmed) {
          const previewDiv = event.target.closest(".image-preview");
          previewDiv.remove();
          if (imageId) {
            // Remove from croppedVariantImages if it's a new image
            if (croppedVariantImages[variantIndex]) {
              croppedVariantImages[variantIndex] = croppedVariantImages[variantIndex].filter(
                (file) => file.name !== imageId
              );
              console.log(`Removed new image ${imageId} from croppedVariantImages[${variantIndex}]`);
            }
          } else {
            // Add to removedImages for original images
            if (!removedImages[variantIndex]) {
              removedImages[variantIndex] = [];
            }
            removedImages[variantIndex].push(imageName);
            console.log(`Added original image ${imageName} to removedImages[${variantIndex}]`);
          }
          Swal.fire("Removed!", "Image has been removed.", "success");
        }
      });
    }
  });

  // Remove Variant
  variantContainer.addEventListener("click", (event) => {
    if (event.target.classList.contains("remove-variant")) {
      const variantIndex = event.target.dataset.index;
      const variantId = event.target.dataset.variantId;
      Swal.fire({
        title: "Are you sure?",
        text: "This will remove the variant!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete it!",
      }).then((result) => {
        if (result.isConfirmed) {
          document.querySelector(`.variant-group[data-index="${variantIndex}"]`).remove();
          if (variantId) {
            removedVariants.push(variantId);
          }
          reindexVariants();
          Swal.fire("Deleted!", "Variant has been removed.", "success");
        }
      });
    }
  });

  // Form Submission
  addProductForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    Swal.fire({
      title: "Confirm Submission",
      text: "Are you sure you want to save changes?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "Yes, save it!",
    }).then(async (result) => {
      if (result.isConfirmed) {
        const productName = document.getElementById("name").value;
        const description = document.getElementById("description").value;
        const category = document.getElementById("category").value;
        const price = document.getElementById("price").value;

        // Validate required fields
        if (!productName || !description || !category || !price) {
          Swal.fire("Error", "Please fill all required fields!", "error");
          return;
        }

        // Validate base price
        if (isNaN(price) || parseFloat(price) <= 0) {
          Swal.fire({
            icon: "warning",
            title: "Invalid Base Price",
            text: "Base price must be a positive number!",
          });
          return;
        }

        const variantGroups = document.querySelectorAll(".variant-group");
        if (variantGroups.length === 0) {
          Swal.fire("Error", "Please add at least one variant!", "error");
          return;
        }

        if (!validateVariants()) return;

        const formData = new FormData(addProductForm);
        variantGroups.forEach((variant, index) => {
          if (removedImages[index]) {
            formData.append(`removed_images[${index}]`, JSON.stringify(removedImages[index]));
          }
          if (croppedVariantImages[index]) {
            croppedVariantImages[index].forEach((image, imgIndex) => {
              formData.append(`variant_images[${index}][]`, image, image.name);
            });
          }
        });

        if (removedVariants.length > 0) {
          formData.append("removed_variants", JSON.stringify(removedVariants));
        }

        try {
          const response = await fetch(`/admin/edit-Product/${productId}`, {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json();
          if (data.success) {
            Swal.fire("Success!", "Product edited successfully.", "success").then(() => {
              window.location.href = "/admin/products";
            });
          } else {
            Swal.fire("Error", data.message || "Something went wrong!", "error");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", `Failed to submit form: ${error.message}`, "error");
        }
      }
    });
  });

  // Add Variant Group
  function addVariantGroup() {
    const index = document.querySelectorAll(".variant-group").length;
    const variantHtml = `
      <div class="variant-group border p-3 mt-2" data-index="${index}">
        <label>Color:</label>
        <input type="text" class="form-control" name="variants[${index}][color]" required>
        <label>Size:</label>
        <select class="form-select" name="variants[${index}][size]" required>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
        </select>
        <label>Price:</label>
        <input type="number" class="form-control" name="variants[${index}][price]" required>
        <label>Stock:</label>
        <input type="number" class="form-control" name="variants[${index}][stock]" min="0" step="1" required>
        <label>Variant Images (at least 3 required):</label>
        <input type="file" class="form-control variantImages" name="variant_images[${index}][]" data-index="${index}" multiple accept="image/jpeg,image/png">
        <div id="variantImagesPreview_${index}" class="d-flex flex-wrap"></div>
        <button type="button" class="btn btn-danger btn-sm remove-variant mt-2" data-index="${index}">Remove Variant</button>
      </div>`;
    variantContainer.insertAdjacentHTML("beforeend", variantHtml);
  }

  // Reindex Variants
  function reindexVariants() {
    const variantGroups = document.querySelectorAll(".variant-group");
    variantGroups.forEach((group, newIndex) => {
      group.dataset.index = newIndex;
      group.querySelector(`[name$="[color]"]`).name = `variants[${newIndex}][color]`;
      group.querySelector(`[name$="[size]"]`).name = `variants[${newIndex}][size]`;
      group.querySelector(`[name$="[price]"]`).name = `variants[${newIndex}][price]`;
      group.querySelector(`[name$="[stock]"]`).name = `variants[${newIndex}][stock]`;
      const fileInput = group.querySelector(".variantImages");
      fileInput.dataset.index = newIndex;
      fileInput.name = `variant_images[${newIndex}][]`;
      const previewDiv = group.querySelector(`[id^="variantImagesPreview_"]`);
      previewDiv.id = `variantImagesPreview_${newIndex}`;
      const removeButton = group.querySelector(".remove-variant");
      removeButton.dataset.index = newIndex;
      const idInput = group.querySelector(`[name$="[id]"]`);
      if (idInput) idInput.name = `variants[${newIndex}][id]`;
    });

    // Reindex croppedVariantImages and removedImages
    const newCroppedVariantImages = {};
    const newRemovedImages = {};
    Object.keys(croppedVariantImages).forEach((key) => {
      const newKey = variantGroups[parseInt(key)] ? Array.from(variantGroups).indexOf(variantGroups[parseInt(key)]) : key;
      newCroppedVariantImages[newKey] = croppedVariantImages[key];
    });
    Object.keys(removedImages).forEach((key) => {
      const newKey = variantGroups[parseInt(key)] ? Array.from(variantGroups).indexOf(variantGroups[parseInt(key)]) : key;
      newRemovedImages[newKey] = removedImages[key];
    });
    croppedVariantImages = newCroppedVariantImages;
    removedImages = newRemovedImages;
    console.log("Reindexed croppedVariantImages:", newCroppedVariantImages);
    console.log("Reindexed removedImages:", newRemovedImages);
  }

  // Validate File Input
  function validateFiles(files) {
    const validTypes = ["image/jpeg", "image/png"];
    const maxSize = 5 * 1024 * 1024; // 5MB
    for (let file of files) {
      if (!validTypes.includes(file.type)) {
        Swal.fire("Error", "Only JPEG/PNG images are allowed!", "error");
        return false;
      }
      if (file.size > maxSize) {
        Swal.fire("Error", "Image size must be less than 5MB!", "error");
        return false;
      }
    }
    return true;
  }

  // Handle File Input
  function handleFileInput(event, variantIndex) {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;
    if (!validateFiles(files)) return;

    if (!croppedVariantImages[variantIndex]) {
      croppedVariantImages[variantIndex] = [];
    }

    let currentIndex = 0;
    function cropNextImage() {
      if (currentIndex < files.length) {
        currentFile = files[currentIndex];
        const reader = new FileReader();
        reader.onload = (e) => {
          cropperImage.src = e.target.result;
          cropperModal.style.display = "block";
          croppingTarget = variantIndex;

          if (cropper) cropper.destroy();
          cropper = new Cropper(cropperImage, { aspectRatio: NaN, viewMode: 2 });

          // Crop Image
          cropImageBtn.onclick = () => {
            handleCroppedImage(variantIndex, currentFile.name);
            currentIndex++;
            cropNextImage();
          };

          // Cancel Crop
          cancelCropBtn.onclick = () => {
            cropperModal.style.display = "none";
            cropper.destroy();
            currentIndex++;
            cropNextImage();
          };

          // Skip Crop
          skipCropBtn.onclick = () => {
            const fileName = `original_${Date.now()}_${currentIndex}.jpg`;
            const newFile = new File([currentFile], fileName, { type: currentFile.type });
            croppedVariantImages[variantIndex].push(newFile);
            console.log(`Calling displayImagePreview for variant ${variantIndex}, file: ${newFile.name}`);
            displayImagePreview(variantIndex, newFile);
            cropperModal.style.display = "none";
            cropper.destroy();
            currentIndex++;
            cropNextImage();
          };
        };
        reader.readAsDataURL(currentFile);
      } else {
        cropperModal.style.display = "none";
      }
    }
    cropNextImage();
  }

  // Handle Cropped Image
  function handleCroppedImage(variantIndex, originalName) {
    const canvas = cropper.getCroppedCanvas();
    canvas.toBlob((blob) => {
      const fileName = `cropped_${Date.now()}_${originalName}`;
      const file = new File([blob], fileName, { type: "image/jpeg" });
      croppedVariantImages[variantIndex].push(file);
      console.log(`Calling displayImagePreview for variant ${variantIndex}, file: ${file.name}`);
      displayImagePreview(variantIndex, file);
      cropperModal.style.display = "none";
      cropper.destroy();
    }, "image/jpeg");
  }

  // Display Image Preview
  function displayImagePreview(variantIndex, file) {
    const previewContainer = document.getElementById(`variantImagesPreview_${variantIndex}`);
    if (!previewContainer) {
      console.error(`Preview container variantImagesPreview_${variantIndex} not found`);
      Swal.fire("Error", "Unable to display image preview. Please try again.", "error");
      return;
    }

    console.log(`Displaying preview for variant ${variantIndex}, file: ${file.name}`);
    const previewDiv = document.createElement("div");
    previewDiv.className = "image-preview";
    const imgPreview = document.createElement("img");
    imgPreview.src = URL.createObjectURL(file);
    imgPreview.style.width = "100px";
    imgPreview.style.margin = "5px";
    imgPreview.onload = () => {
      console.log(`Image loaded for variant ${variantIndex}`);
      URL.revokeObjectURL(imgPreview.src);
    };
    imgPreview.onerror = () => {
      console.error(`Failed to load image for variant ${variantIndex}`);
      Swal.fire("Error", "Failed to load image preview.", "error");
    };
    previewDiv.appendChild(imgPreview);
    // Add remove button for new images
    const removeButton = document.createElement("button");
    removeButton.type = "button";
    removeButton.className = "btn btn-danger btn-sm remove-image";
    removeButton.dataset.index = variantIndex;
    removeButton.dataset.imageId = file.name; // Track new image
    removeButton.textContent = "‚ùå";
    previewDiv.appendChild(removeButton);
    previewContainer.appendChild(previewDiv);
  }

  // Validate Variants
  function validateVariants() {
    const variants = document.querySelectorAll(".variant-group");
    const seen = new Set();
    let isValid = true;

    variants.forEach((variant, index) => {
      const color = variant.querySelector(`[name="variants[${index}][color]"]`).value;
      const size = variant.querySelector(`[name="variants[${index}][size]"]`).value;
      const price = parseFloat(variant.querySelector(`[name="variants[${index}][price]"]`).value);
      const stock = parseInt(variant.querySelector(`[name="variants[${index}][stock]"]`).value);
      const key = `${color}-${size}`;

      // Check required fields
      if (!color || !size || isNaN(price) || isNaN(stock)) {
        Swal.fire("Error", `Please fill all fields for variant ${index + 1}!`, "error");
        isValid = false;
        return;
      }

      // Check for duplicates
      if (seen.has(key)) {
        Swal.fire("Error", `Duplicate variant: ${color}, ${size}`, "error");
        isValid = false;
        return;
      }
      seen.add(key);

      // Validate price
      if (price <= 0) {
        Swal.fire("Error", `Price for variant ${index + 1} must be a positive number!`, "error");
        isValid = false;
        return;
      }

      // Validate stock
      if (stock < 0) {
        Swal.fire("Error", `Stock for variant ${index + 1} must be a non-negative integer!`, "error");
        isValid = false;
        return;
      }

      // Validate images (at least 3)
      const existingImages = variant.querySelectorAll(".image-preview img").length;
      const removedCount = removedImages[index]?.length || 0;
      const newImages = croppedVariantImages[index]?.length || 0;
      const totalImages = existingImages; // Use DOM count directly
      console.log(`Variant ${index + 1}: existingImages=${existingImages}, removedCount=${removedCount}, newImages=${newImages}, totalImages=${totalImages}`);
      if (totalImages < 3) {
        Swal.fire("Error", `Variant ${index + 1} must have at least 3 images!`, "error");
        isValid = false;
        return;
      }
    });

    return isValid;
  }
});
  </script>
<%- include('../admin/partials/footer') %>