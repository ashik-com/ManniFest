
<%- include('../admin/partials/header') %>

<div class="container-fluid">
    <div class="card">
        <div class="card-body">
            <h2>Add Offer for <%= product.name %></h2>
            <form id="addProductOfferForm" action="/admin/add-offer" method="POST" novalidate>
                <input type="hidden" name="offerType" value="product">
                <input type="hidden" name="productId" value="<%= product._id %>">
                <div class="mb-3">
                    <label for="productName" class="form-label">Product:</label>
                    <input type="text" id="productName" class="form-control" value="<%= product.name %>" disabled>
                </div>
                <div class="mb-3">
                    <label for="discountType" class="form-label">Discount Type:</label>
                    <select name="discountType" id="discountType" class="form-control" required>
                        <option value="percentage">Percentage</option>
                        <option value="fixed">Fixed Amount</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="discountValue" class="form-label">Discount Value:</label>
                    <input type="number" name="discountValue" id="discountValue" class="form-control" required min="0" step="0.01">
                    <div id="valueHelp" class="form-text">For percentage, enter value between 1-75</div>
                </div>
                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date:</label>
                    <input type="date" name="startDate" id="startDate" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="endDate" class="form-label">End Date:</label>
                    <input type="date" name="endDate" id="endDate" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-success" id="submitBtn">Add Offer</button>
                <a href="/admin/products" class="btn btn-secondary">Cancel</a>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('addProductOfferForm');
    const discountTypeSelect = document.getElementById('discountType');
    const discountValueInput = document.getElementById('discountValue');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const valueHelp = document.getElementById('valueHelp');
    const submitBtn = document.getElementById('submitBtn');

    // Check if SweetAlert2 is loaded
    if (typeof Swal === 'undefined') {
        console.error('SweetAlert2 is not loaded. Falling back to native alerts.');
        window.alert('Error: SweetAlert2 library failed to load. Please check your internet connection or CDN.');
    }

    // Set minimum date to today
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    const todayFormatted = `${yyyy}-${mm}-${dd}`;
    startDateInput.min = todayFormatted;
    endDateInput.min = todayFormatted;

    // Update helper text and constraints based on discount type
    discountTypeSelect.addEventListener('change', function () {
        if (this.value === 'percentage') {
            valueHelp.textContent = 'For percentage, enter value between 1-75';
            discountValueInput.max = 75;
            discountValueInput.min = 1;
            discountValueInput.step = 1;
        } else {
            valueHelp.textContent = 'Enter fixed discount amount in â‚¹';
            discountValueInput.max = '';
            discountValueInput.min = 0.01;
            discountValueInput.step = 0.01;
        }
    });

    // Update endDate min based on startDate
    startDateInput.addEventListener('change', function () {
        const startDate = this.value;
        endDateInput.min = startDate || todayFormatted;
    });

    // Trigger initial discount type change
    discountTypeSelect.dispatchEvent(new Event('change'));

    // Form submission with validation
    form.addEventListener('submit', async function (e) {
        e.preventDefault();
        console.log('Form submit event triggered'); // Debug statement

        submitBtn.disabled = true;
        submitBtn.textContent = 'Adding...';

        // Validation function with SweetAlert2 or fallback
        const showError = (title, text) => {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: text,
                });
            } else {
                alert(`${title}: ${text}`);
            }
            submitBtn.disabled = false;
            submitBtn.textContent = 'Add Offer';
        };

        // Gather input values
        const discountType = discountTypeSelect.value;
        const discountValue = parseFloat(discountValueInput.value) || 0;
        const startDateValue = startDateInput.value;
        const endDateValue = endDateInput.value;
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        const startDate = new Date(startDateValue);
        startDate.setHours(0, 0, 0, 0);
        const endDate = new Date(endDateValue);
        endDate.setHours(0, 0, 0, 0);

        // Discount type validation
        if (!['percentage', 'fixed'].includes(discountType)) {
            showError('Invalid Discount Type', 'Discount type must be either "percentage" or "fixed"');
            return;
        }

        // Discount value validation
        if (isNaN(discountValue) || discountValue <= 0) {
            showError('Invalid Discount Value', 'Discount value must be greater than zero');
            return;
        }

        if (discountType === 'percentage' && (discountValue < 1 || discountValue > 75)) {
            showError('Invalid Percentage', 'Percentage discount must be between 1 and 75');
            return;
        }

        // Start date validation
        if (!startDateValue) {
            showError('Invalid Start Date', 'Please select a start date');
            return;
        }

        if (isNaN(startDate.getTime())) {
            showError('Invalid Start Date', 'Please enter a valid start date');
            return;
        }

        if (startDate < currentDate) {
            showError('Invalid Start Date', 'Start date must be today or in the future');
            return;
        }

        // End date validation
        if (!endDateValue) {
            showError('Invalid End Date', 'Please select an end date');
            return;
        }

        if (isNaN(endDate.getTime())) {
            showError('Invalid End Date', 'Please enter a valid end date');
            return;
        }

        if (endDate <= startDate) {
            showError('Invalid Dates', 'End date must be after start date');
            return;
        }

        // Prepare form data
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);

        try {
            const response = await fetch('/admin/add-product-offer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            const result = await response.json();

            if (response.ok && result.success) {
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Offer Added!',
                        text: 'The product offer has been successfully added.',
                        showConfirmButton: false,
                        timer: 1500,
                    }).then(() => {
                        window.location.href = '/admin/products';
                    });
                } else {
                    alert('The product offer has been successfully added.');
                    window.location.href = '/admin/products';
                }
            } else {
                const errorMessage = result.message || 'Something went wrong!';
                showError('Failed to Add Offer', errorMessage);
            }
        } catch (error) {
            console.error('Error adding offer:', error);
            showError('Network Error', 'An error occurred while adding the offer!');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Add Offer';
        }
    });
});
</script>

<%- include('../admin/partials/footer') %>
