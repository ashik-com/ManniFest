<%- include('../admin/partials/header') %>
<style>
    .loading-spinner {
        display: none;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #3498db;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-left: 10px;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .search-container {
        position: relative;
        display: flex;
        align-items: center;
    }
</style>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Order Management</h2>
        <div class="d-flex align-items-center gap-3">
            
            <div class="search-container">
                <input 
                    style="width: 400px;" 
                    type="text" 
                    id="searchOrder" 
                    class="form-control" 
                    placeholder="Search orders..." 
                    value="<%= searchQuery || '' %>"
                >
                <div id="loadingSpinner" class="loading-spinner"></div>
            </div>
        </div>
    </div>
    
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Customer Email</th>
                <th>Product</th>
                <th>Variant</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Order Status</th>
                <th>Payment Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="orderTableBody">
            <% orders.forEach(order => { %>
                <% order.items.forEach((item, index) => { %>
                <tr>
                    <td><%= order.userEmail || 'N/A' %></td>
                    <td>
                        <%= item.productName %>
                        <% if (item.returnRequested && !item.returned) { %>
                            <span class="badge bg-warning text-dark ms-2">!</span>
                        <% } %>
                    </td>
                    <td><%= item.variantColor %> / <%= item.variantSize %></td>
                    <td>â‚¹<%= item.price.toFixed(2) %></td>
                    <td><%= item.quantity %></td>
                    <td>
                        <% if (item.cancelled) { %>
                            <span class="badge bg-danger">Cancelled</span>
                        <% } else if (item.returned) { %>
                            <span class="badge bg-secondary">Returned</span>
                        <% } else { %>
                            <span class="badge <%= order.orderStatus === 'Cancelled' ? 'bg-danger' : order.orderStatus === 'Delivered' ? 'bg-success' : 'bg-info' %>">
                                <%= order.orderStatus %>
                            </span>
                        <% } %>
                    </td>
                    <td>
                        <span class="badge <%= order.paymentStatus === 'Pending' ? 'bg-warning' : order.paymentStatus === 'Paid' ? 'bg-success' : order.paymentStatus === 'Failed' ? 'bg-danger' : 'bg-info' %>">
                            <%= order.paymentStatus %>
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm view-order" data-order-id="<%= order._id %>">View</button>
                        <% if (item.returnRequested && !item.returned) { %>
                            <button class="btn btn-success btn-sm approve-return" data-order-id="<%= order._id %>" data-item-index="<%= index %>">Approve</button>
                            <button class="btn btn-danger btn-sm reject-return" data-order-id="<%= order._id %>" data-item-index="<%= index %>">Decline</button>
                        <% } %>
                    </td>
                </tr>
                <% }) %>
            <% }) %>
        </tbody>
    </table>
    <div class="pagination">
        <% if (currentPage > 1) { %>
            <a href="/admin/orders?page=<%= currentPage - 1 %>&search=<%= encodeURIComponent(searchQuery) %>">Previous</a>
        <% } %>
    
        <% for (let i = 1; i <= totalPages; i++) { %>
            <a href="/admin/orders?page=<%= i %>&search=<%= encodeURIComponent(searchQuery) %>" class="<%= i === currentPage ? 'active' : '' %>">
                <%= i %>
            </a>
        <% } %>
    
        <% if (currentPage < totalPages) { %>
            <a href="/admin/orders?page=<%= currentPage + 1 %>&search=<%= encodeURIComponent(searchQuery) %>">Next</a>
        <% } %>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchOrder");
        const loadingSpinner = document.getElementById("loadingSpinner");
        let isSearching = false;

        // Search functionality with loading animation
        searchInput.addEventListener("input", debounce(function () {
            if (isSearching) return;
            
            const query = this.value.trim();
            isSearching = true;
            loadingSpinner.style.display = 'block';
            
            // Update URL with search query
            window.location.href = `/admin/orders?search=${encodeURIComponent(query)}`;
        }, 800));

        // Handle page load to restore search query
        window.addEventListener('load', () => {
            loadingSpinner.style.display = 'none';
            isSearching = false;
        });

        // View order details
        document.querySelectorAll(".view-order").forEach(button => {
            button.addEventListener("click", function () {
                const orderId = this.getAttribute("data-order-id");
                window.location.href = `/admin/order-details/${orderId}`;
            });
        });

        // Approve return with SweetAlert
        document.querySelectorAll(".approve-return").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");
                const itemIndex = this.getAttribute("data-item-index");

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to approve this return?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, Approve It'
                });

                if (result.isConfirmed) {
                    try {
                        loadingSpinner.style.display = 'block';
                        const response = await fetch(`/admin/approve-return-item/${orderId}/${itemIndex}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });
                        const result = await response.json();
                        loadingSpinner.style.display = 'none';

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Return approved and stock updated!',
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: result.message || 'Failed to approve return.',
                            });
                        }
                    } catch (error) {
                        loadingSpinner.style.display = 'none';
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Network error occurred!',
                        });
                    }
                }
            });
        });

        // Reject return with SweetAlert
        document.querySelectorAll(".reject-return").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.getAttribute("data-order-id");
                const itemIndex = this.getAttribute("data-item-index");

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to decline this return?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, Decline It'
                });

                if (result.isConfirmed) {
                    try {
                        loadingSpinner.style.display = 'block';
                        const response = await fetch(`/admin/reject-return-item/${orderId}/${itemIndex}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });
                        const result = await response.json();
                        loadingSpinner.style.display = 'none';

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: result.message || 'Return request declined!',
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: result.message || 'Failed to decline return.',
                            });
                        }
                    } catch (error) {
                        loadingSpinner.style.display = 'none';
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Network error occurred!',
                        });
                    }
                }
            });
        });
    });

    function debounce(func, delay) {
        let timer;
        return function () {
            const context = this, args = arguments;
            clearTimeout(timer);
            timer = setTimeout(() => func.apply(context, args), delay);
        };
    }
</script>
<%- include('../admin/partials/footer') %>